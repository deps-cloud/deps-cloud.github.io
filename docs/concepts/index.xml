<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>deps.cloud â€“ Concepts</title>
    <link>https://deps.cloud/docs/concepts/</link>
    <description>Recent content in Concepts on deps.cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://deps.cloud/docs/concepts/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Terminology</title>
      <link>https://deps.cloud/docs/concepts/terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://deps.cloud/docs/concepts/terminology/</guid>
      <description>
        
        
        &lt;h3 id=&#34;manifest-file&#34;&gt;Manifest file&lt;/h3&gt;
&lt;p&gt;Manifest file is the term used to refer to common dependency management files.
In NodeJS, &lt;code&gt;package.json&lt;/code&gt; is used to declare dependencies that your project requires.
In Java, you might use &lt;code&gt;build.gradle&lt;/code&gt; or a &lt;code&gt;pom.xml&lt;/code&gt; depending on our build chain.
&lt;code&gt;go.mod&lt;/code&gt; in Go, &lt;code&gt;Pipfile&lt;/code&gt; in Python, the list goes for many languages.&lt;/p&gt;
&lt;p&gt;Simply put, a manifest file can be thought of as any file that communicates what a software project needs.
It&amp;rsquo;s through these files that deps.cloud is able to construct its knowledge graph.&lt;/p&gt;
&lt;h3 id=&#34;source&#34;&gt;Source&lt;/h3&gt;
&lt;p&gt;Sources dictate where a given library can be found.
A source might be a repository on GitHub or in GitLab.
It might be an artifactory like JFrog, Sonatype Nexus, or even a Helm Repository.&lt;/p&gt;
&lt;p&gt;Currently, deps.cloud marks sources using their raw URL.
We are working on formalizing a provider URL concept that will decouple the discovery source from repository URLs.&lt;/p&gt;
&lt;h3 id=&#34;module&#34;&gt;Module&lt;/h3&gt;
&lt;p&gt;Modules in deps.cloud can represent a library (the common case), application, or repository.
This can largely depend on how a given organization manages their repositories and dependencies.
Do you use a monorepo or do you have a repo per service?
Is each service allowed their own set of dependencies or do you pull from one common pool?&lt;/p&gt;
&lt;!-- todo: illustrate this --&gt;
&lt;h3 id=&#34;dependency&#34;&gt;Dependency&lt;/h3&gt;
&lt;p&gt;Dependencies are the connective tissue of deps.cloud.
A dependency defines a relationship between two modules.
Specifically a directed, versioned, and historical relationship.
It&amp;rsquo;s this type of relationship that makes modeling data in traditional data stores difficult.&lt;/p&gt;
&lt;p&gt;There are many graph databases out there that handle this type of relationship well.&lt;/p&gt;
&lt;h3 id=&#34;dependent&#34;&gt;Dependent&lt;/h3&gt;
&lt;p&gt;Dependents is the inverse of dependency.
A good way to think about this association is through familial bonds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;my child &lt;em&gt;depends&lt;/em&gt; on me (dependency), and my &lt;em&gt;dependents&lt;/em&gt; include my child&amp;hellip; at least until their older&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is intended to demonstrate that the dependency property is reflexive (i.e. it can be turned back on itself).
As we traverse edges in our graph, it&amp;rsquo;s important we maintain the direction we are traversing.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dependency Graphs</title>
      <link>https://deps.cloud/docs/concepts/graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://deps.cloud/docs/concepts/graphs/</guid>
      <description>
        
        
        &lt;p&gt;Many concepts in the deps.cloud ecosystem stem from &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_theory&#34;&gt;graph theory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When we think about dependencies, we often immediately think about &lt;a href=&#34;https://en.wikipedia.org/wiki/Tree_%28data_structure%29&#34;&gt;trees&lt;/a&gt;.
This is likely because as engineers, we&amp;rsquo;re often working within the confines of a handful of projects.
Each one of these projects are likely a logical root to the tree.
And as we pull in dependencies, that tree can grow&amp;hellip; and grow&amp;hellip; and grow.
In practice, this tree is actually a graph (technically a tree with a few special characteristics).&lt;/p&gt;
&lt;p&gt;Graphs are a data structure used to model relationships between objects.
They consist of nodes (entities) and edges (associations).&lt;/p&gt;
&lt;p&gt;Graphs can be either directed or undirected.
Edges in undirected graphs simply connect two nodes, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.
Edges in directed graphs have a start at &lt;code&gt;x&lt;/code&gt; and end at &lt;code&gt;y&lt;/code&gt;, indicating a direction to the edge.
You can only traverse directed edges in their associated direction (i.e. from &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Graphs can be acyclic, meaning they contain no cycles;
or they can be cyclic, meaning they have cycles.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_graph&#34;&gt;Dependency graphs&lt;/a&gt; are directed graphs that represent dependencies between objects.
This data structure is at the heart of deps.cloud.
Most software we write requires some kind of dependency.
These dependencies come in many shapes and forms, but the ones we&amp;rsquo;re most familiar with are libraries.
To demonstrate, let us consider an example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application &lt;code&gt;A&lt;/code&gt; uses library &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Library &lt;code&gt;B&lt;/code&gt; needs libraries &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Library &lt;code&gt;C&lt;/code&gt; also depends on library &lt;code&gt;D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visually, the dependency graph for such a system would look like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggTFJcbiAgQSAtLT4gQlxuICBCIC0tPiBEXG4gIEIgLS0-IENcbiAgQyAtLT4gRCIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0IiwidGhlbWVWYXJpYWJsZXMiOnsiYmFja2dyb3VuZCI6IndoaXRlIiwicHJpbWFyeUNvbG9yIjoiI0VDRUNGRiIsInNlY29uZGFyeUNvbG9yIjoiI2ZmZmZkZSIsInRlcnRpYXJ5Q29sb3IiOiJoc2woODAsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsInByaW1hcnlCb3JkZXJDb2xvciI6ImhzbCgyNDAsIDYwJSwgODYuMjc0NTA5ODAzOSUpIiwic2Vjb25kYXJ5Qm9yZGVyQ29sb3IiOiJoc2woNjAsIDYwJSwgODMuNTI5NDExNzY0NyUpIiwidGVydGlhcnlCb3JkZXJDb2xvciI6ImhzbCg4MCwgNjAlLCA4Ni4yNzQ1MDk4MDM5JSkiLCJwcmltYXJ5VGV4dENvbG9yIjoiIzEzMTMwMCIsInNlY29uZGFyeVRleHRDb2xvciI6IiMwMDAwMjEiLCJ0ZXJ0aWFyeVRleHRDb2xvciI6InJnYig5LjUwMDAwMDAwMDEsIDkuNTAwMDAwMDAwMSwgOS41MDAwMDAwMDAxKSIsImxpbmVDb2xvciI6IiMzMzMzMzMiLCJ0ZXh0Q29sb3IiOiIjMzMzIiwibWFpbkJrZyI6IiNFQ0VDRkYiLCJzZWNvbmRCa2ciOiIjZmZmZmRlIiwiYm9yZGVyMSI6IiM5MzcwREIiLCJib3JkZXIyIjoiI2FhYWEzMyIsImFycm93aGVhZENvbG9yIjoiIzMzMzMzMyIsImZvbnRGYW1pbHkiOiJcInRyZWJ1Y2hldCBtc1wiLCB2ZXJkYW5hLCBhcmlhbCIsImZvbnRTaXplIjoiMTZweCIsImxhYmVsQmFja2dyb3VuZCI6IiNlOGU4ZTgiLCJub2RlQmtnIjoiI0VDRUNGRiIsIm5vZGVCb3JkZXIiOiIjOTM3MERCIiwiY2x1c3RlckJrZyI6IiNmZmZmZGUiLCJjbHVzdGVyQm9yZGVyIjoiI2FhYWEzMyIsImRlZmF1bHRMaW5rQ29sb3IiOiIjMzMzMzMzIiwidGl0bGVDb2xvciI6IiMzMzMiLCJlZGdlTGFiZWxCYWNrZ3JvdW5kIjoiI2U4ZThlOCIsImFjdG9yQm9yZGVyIjoiaHNsKDI1OS42MjYxNjgyMjQzLCA1OS43NzY1MzYzMTI4JSwgODcuOTAxOTYwNzg0MyUpIiwiYWN0b3JCa2ciOiIjRUNFQ0ZGIiwiYWN0b3JUZXh0Q29sb3IiOiJibGFjayIsImFjdG9yTGluZUNvbG9yIjoiZ3JleSIsInNpZ25hbENvbG9yIjoiIzMzMyIsInNpZ25hbFRleHRDb2xvciI6IiMzMzMiLCJsYWJlbEJveEJrZ0NvbG9yIjoiI0VDRUNGRiIsImxhYmVsQm94Qm9yZGVyQ29sb3IiOiJoc2woMjU5LjYyNjE2ODIyNDMsIDU5Ljc3NjUzNjMxMjglLCA4Ny45MDE5NjA3ODQzJSkiLCJsYWJlbFRleHRDb2xvciI6ImJsYWNrIiwibG9vcFRleHRDb2xvciI6ImJsYWNrIiwibm90ZUJvcmRlckNvbG9yIjoiI2FhYWEzMyIsIm5vdGVCa2dDb2xvciI6IiNmZmY1YWQiLCJub3RlVGV4dENvbG9yIjoiYmxhY2siLCJhY3RpdmF0aW9uQm9yZGVyQ29sb3IiOiIjNjY2IiwiYWN0aXZhdGlvbkJrZ0NvbG9yIjoiI2Y0ZjRmNCIsInNlcXVlbmNlTnVtYmVyQ29sb3IiOiJ3aGl0ZSIsInNlY3Rpb25Ca2dDb2xvciI6InJnYmEoMTAyLCAxMDIsIDI1NSwgMC40OSkiLCJhbHRTZWN0aW9uQmtnQ29sb3IiOiJ3aGl0ZSIsInNlY3Rpb25Ca2dDb2xvcjIiOiIjZmZmNDAwIiwidGFza0JvcmRlckNvbG9yIjoiIzUzNGZiYyIsInRhc2tCa2dDb2xvciI6IiM4YTkwZGQiLCJ0YXNrVGV4dExpZ2h0Q29sb3IiOiJ3aGl0ZSIsInRhc2tUZXh0Q29sb3IiOiJ3aGl0ZSIsInRhc2tUZXh0RGFya0NvbG9yIjoiYmxhY2siLCJ0YXNrVGV4dE91dHNpZGVDb2xvciI6ImJsYWNrIiwidGFza1RleHRDbGlja2FibGVDb2xvciI6IiMwMDMxNjMiLCJhY3RpdmVUYXNrQm9yZGVyQ29sb3IiOiIjNTM0ZmJjIiwiYWN0aXZlVGFza0JrZ0NvbG9yIjoiI2JmYzdmZiIsImdyaWRDb2xvciI6ImxpZ2h0Z3JleSIsImRvbmVUYXNrQmtnQ29sb3IiOiJsaWdodGdyZXkiLCJkb25lVGFza0JvcmRlckNvbG9yIjoiZ3JleSIsImNyaXRCb3JkZXJDb2xvciI6IiNmZjg4ODgiLCJjcml0QmtnQ29sb3IiOiJyZWQiLCJ0b2RheUxpbmVDb2xvciI6InJlZCIsImxhYmVsQ29sb3IiOiJibGFjayIsImVycm9yQmtnQ29sb3IiOiIjNTUyMjIyIiwiZXJyb3JUZXh0Q29sb3IiOiIjNTUyMjIyIiwiY2xhc3NUZXh0IjoiIzEzMTMwMCIsImZpbGxUeXBlMCI6IiNFQ0VDRkYiLCJmaWxsVHlwZTEiOiIjZmZmZmRlIiwiZmlsbFR5cGUyIjoiaHNsKDMwNCwgMTAwJSwgOTYuMjc0NTA5ODAzOSUpIiwiZmlsbFR5cGUzIjoiaHNsKDEyNCwgMTAwJSwgOTMuNTI5NDExNzY0NyUpIiwiZmlsbFR5cGU0IjoiaHNsKDE3NiwgMTAwJSwgOTYuMjc0NTA5ODAzOSUpIiwiZmlsbFR5cGU1IjoiaHNsKC00LCAxMDAlLCA5My41Mjk0MTE3NjQ3JSkiLCJmaWxsVHlwZTYiOiJoc2woOCwgMTAwJSwgOTYuMjc0NTA5ODAzOSUpIiwiZmlsbFR5cGU3IjoiaHNsKDE4OCwgMTAwJSwgOTMuNTI5NDExNzY0NyUpIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ&#34;&gt;&lt;img src=&#34;https://mermaid.ink/svg/eyJjb2RlIjoiZ3JhcGggTFJcbiAgQSAtLT4gQlxuICBCIC0tPiBEXG4gIEIgLS0-IENcbiAgQyAtLT4gRCIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0IiwidGhlbWVWYXJpYWJsZXMiOnsiYmFja2dyb3VuZCI6IndoaXRlIiwicHJpbWFyeUNvbG9yIjoiI0VDRUNGRiIsInNlY29uZGFyeUNvbG9yIjoiI2ZmZmZkZSIsInRlcnRpYXJ5Q29sb3IiOiJoc2woODAsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsInByaW1hcnlCb3JkZXJDb2xvciI6ImhzbCgyNDAsIDYwJSwgODYuMjc0NTA5ODAzOSUpIiwic2Vjb25kYXJ5Qm9yZGVyQ29sb3IiOiJoc2woNjAsIDYwJSwgODMuNTI5NDExNzY0NyUpIiwidGVydGlhcnlCb3JkZXJDb2xvciI6ImhzbCg4MCwgNjAlLCA4Ni4yNzQ1MDk4MDM5JSkiLCJwcmltYXJ5VGV4dENvbG9yIjoiIzEzMTMwMCIsInNlY29uZGFyeVRleHRDb2xvciI6IiMwMDAwMjEiLCJ0ZXJ0aWFyeVRleHRDb2xvciI6InJnYig5LjUwMDAwMDAwMDEsIDkuNTAwMDAwMDAwMSwgOS41MDAwMDAwMDAxKSIsImxpbmVDb2xvciI6IiMzMzMzMzMiLCJ0ZXh0Q29sb3IiOiIjMzMzIiwibWFpbkJrZyI6IiNFQ0VDRkYiLCJzZWNvbmRCa2ciOiIjZmZmZmRlIiwiYm9yZGVyMSI6IiM5MzcwREIiLCJib3JkZXIyIjoiI2FhYWEzMyIsImFycm93aGVhZENvbG9yIjoiIzMzMzMzMyIsImZvbnRGYW1pbHkiOiJcInRyZWJ1Y2hldCBtc1wiLCB2ZXJkYW5hLCBhcmlhbCIsImZvbnRTaXplIjoiMTZweCIsImxhYmVsQmFja2dyb3VuZCI6IiNlOGU4ZTgiLCJub2RlQmtnIjoiI0VDRUNGRiIsIm5vZGVCb3JkZXIiOiIjOTM3MERCIiwiY2x1c3RlckJrZyI6IiNmZmZmZGUiLCJjbHVzdGVyQm9yZGVyIjoiI2FhYWEzMyIsImRlZmF1bHRMaW5rQ29sb3IiOiIjMzMzMzMzIiwidGl0bGVDb2xvciI6IiMzMzMiLCJlZGdlTGFiZWxCYWNrZ3JvdW5kIjoiI2U4ZThlOCIsImFjdG9yQm9yZGVyIjoiaHNsKDI1OS42MjYxNjgyMjQzLCA1OS43NzY1MzYzMTI4JSwgODcuOTAxOTYwNzg0MyUpIiwiYWN0b3JCa2ciOiIjRUNFQ0ZGIiwiYWN0b3JUZXh0Q29sb3IiOiJibGFjayIsImFjdG9yTGluZUNvbG9yIjoiZ3JleSIsInNpZ25hbENvbG9yIjoiIzMzMyIsInNpZ25hbFRleHRDb2xvciI6IiMzMzMiLCJsYWJlbEJveEJrZ0NvbG9yIjoiI0VDRUNGRiIsImxhYmVsQm94Qm9yZGVyQ29sb3IiOiJoc2woMjU5LjYyNjE2ODIyNDMsIDU5Ljc3NjUzNjMxMjglLCA4Ny45MDE5NjA3ODQzJSkiLCJsYWJlbFRleHRDb2xvciI6ImJsYWNrIiwibG9vcFRleHRDb2xvciI6ImJsYWNrIiwibm90ZUJvcmRlckNvbG9yIjoiI2FhYWEzMyIsIm5vdGVCa2dDb2xvciI6IiNmZmY1YWQiLCJub3RlVGV4dENvbG9yIjoiYmxhY2siLCJhY3RpdmF0aW9uQm9yZGVyQ29sb3IiOiIjNjY2IiwiYWN0aXZhdGlvbkJrZ0NvbG9yIjoiI2Y0ZjRmNCIsInNlcXVlbmNlTnVtYmVyQ29sb3IiOiJ3aGl0ZSIsInNlY3Rpb25Ca2dDb2xvciI6InJnYmEoMTAyLCAxMDIsIDI1NSwgMC40OSkiLCJhbHRTZWN0aW9uQmtnQ29sb3IiOiJ3aGl0ZSIsInNlY3Rpb25Ca2dDb2xvcjIiOiIjZmZmNDAwIiwidGFza0JvcmRlckNvbG9yIjoiIzUzNGZiYyIsInRhc2tCa2dDb2xvciI6IiM4YTkwZGQiLCJ0YXNrVGV4dExpZ2h0Q29sb3IiOiJ3aGl0ZSIsInRhc2tUZXh0Q29sb3IiOiJ3aGl0ZSIsInRhc2tUZXh0RGFya0NvbG9yIjoiYmxhY2siLCJ0YXNrVGV4dE91dHNpZGVDb2xvciI6ImJsYWNrIiwidGFza1RleHRDbGlja2FibGVDb2xvciI6IiMwMDMxNjMiLCJhY3RpdmVUYXNrQm9yZGVyQ29sb3IiOiIjNTM0ZmJjIiwiYWN0aXZlVGFza0JrZ0NvbG9yIjoiI2JmYzdmZiIsImdyaWRDb2xvciI6ImxpZ2h0Z3JleSIsImRvbmVUYXNrQmtnQ29sb3IiOiJsaWdodGdyZXkiLCJkb25lVGFza0JvcmRlckNvbG9yIjoiZ3JleSIsImNyaXRCb3JkZXJDb2xvciI6IiNmZjg4ODgiLCJjcml0QmtnQ29sb3IiOiJyZWQiLCJ0b2RheUxpbmVDb2xvciI6InJlZCIsImxhYmVsQ29sb3IiOiJibGFjayIsImVycm9yQmtnQ29sb3IiOiIjNTUyMjIyIiwiZXJyb3JUZXh0Q29sb3IiOiIjNTUyMjIyIiwiY2xhc3NUZXh0IjoiIzEzMTMwMCIsImZpbGxUeXBlMCI6IiNFQ0VDRkYiLCJmaWxsVHlwZTEiOiIjZmZmZmRlIiwiZmlsbFR5cGUyIjoiaHNsKDMwNCwgMTAwJSwgOTYuMjc0NTA5ODAzOSUpIiwiZmlsbFR5cGUzIjoiaHNsKDEyNCwgMTAwJSwgOTMuNTI5NDExNzY0NyUpIiwiZmlsbFR5cGU0IjoiaHNsKDE3NiwgMTAwJSwgOTYuMjc0NTA5ODAzOSUpIiwiZmlsbFR5cGU1IjoiaHNsKC00LCAxMDAlLCA5My41Mjk0MTE3NjQ3JSkiLCJmaWxsVHlwZTYiOiJoc2woOCwgMTAwJSwgOTYuMjc0NTA5ODAzOSUpIiwiZmlsbFR5cGU3IjoiaHNsKDE4OCwgMTAwJSwgOTMuNTI5NDExNzY0NyUpIn19LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ&#34; alt=&#34;dependency graph&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While our example is small, real world cases often grow in size and complexity.
The more complex the structure gets, the harder it can be to make changes to it.
As it grows in size, it can be difficult to track all the open source software you use.&lt;/p&gt;
&lt;p&gt;deps.cloud helps companies understand their software dependency graph.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Graph Traversal</title>
      <link>https://deps.cloud/docs/concepts/graph-traversal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://deps.cloud/docs/concepts/graph-traversal/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_traversal&#34;&gt;Graph traversal&lt;/a&gt; refers to the process of walking and navigating a graph.
They are similar to tree traversals, but require tracking nodes you&amp;rsquo;ve visited as it&amp;rsquo;s possible to encounter cycles.
To simplify this for consumers, deps.cloud provides a search API for traversing its graph.
These operations are particularly useful for grabbing a &lt;a href=&#34;https://en.wikipedia.org/wiki/Glossary_of_graph_theory#subgraph&#34;&gt;subgraph&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;breadth-first-search&#34;&gt;Breadth-first Search&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Breadth-first_search&#34;&gt;Breadth-first search&lt;/a&gt; (commonly abbreviated BFS) is an algorithm used to traverse tree and graph data structures.
This approach often starts with a root node.
The algorithm progresses by visiting neighbors of increasing depth (level by level).&lt;/p&gt;
&lt;h3 id=&#34;depth-first-search&#34;&gt;Depth-first Search&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Depth-first_search&#34;&gt;Depth-first search&lt;/a&gt; (commonly abbreviated DFS) is another traversal algorithm.
In this traversal, branches of the data structure are exhausted before backtracking.
Unlike BFS, there are several possible orderings for the output of a DFS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;preordering&lt;/em&gt; lists all nodes in the order they were first visit.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;postordering&lt;/em&gt; lists all nodes in the order they were last visited.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;reverse preordering&lt;/em&gt; lists all nodes in the opposite order they were first visit. This is not the same as a postordering.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;reverse postordering&lt;/em&gt; lists all nodes in the opposite order they were last visited. This is not the same as a preordering.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
